snippet log
	print ${1:var}

snippet debug
	import logging
	logging.debug(${1:var})

snippet gae_api
	#!/usr/bin/env python
	
	###########################################################
	# Solve bug: http://groups.google.com/group/google-appengine-python/browse_thread/thread/e3a9d8b8be36870d/5dc96ab56b889dc6?pli=1
	# Remove the standard version of Django and put version 1.1
	import os
	
	os.environ['DJANGO_SETTINGS_MODULE'] = 'razoss_dock.settings'
	if not os.path.exists(os.path.abspath(os.path.dirname(__file__)) + '/../non_gae_indicator'):
	    from appengine_django import InstallAppengineHelperForDjango
	    InstallAppengineHelperForDjango(version='1.1')
	###########################################################
	
	from google.appengine.ext import webapp, db
	from google.appengine.ext.webapp.util import run_wsgi_app
	
	from django.utils import simplejson as json
	
	from datetime import datetime, date
	class JsonEncoder(json.JSONEncoder):
	    def default(self, obj):
	        """Example for type encoder definition
	
	        if isinstance(obj, date):
	            return '**new Date(%i,%i,%i)' % (obj.year,
	                                             obj.month-1,
	                                             obj.day)
	        """
	
	        return obj.__dict__
	
	
	class Default(webapp.RequestHandler):
	    """Default serves the paths we don't have particular mapping for
	    """
	
	    def get(self):
	        if self.request.path[-1] != '/':
	            return self.redirect(self.request.path + '/', permanent=True)
	
	        self.error(404)
	
	application = webapp.WSGIApplication([
	    ('.*', Default),
	], debug=True)
	
	def main():
	    run_wsgi_app(application)
	
	if __name__ == '__main__':
	    main()

# vim related snippets {{{

# folds {{{
snippet {{
	# ${1:foldname} {{{
snippet c}
	# }}}
snippet {}
	# ${1:foldname} {{{
	${2}
	# }}}
# }}}

# modline {{{
snippet vmod
	# vim:fdm=marker:fmr={{{,}}}:
# }}}

# }}}
