snippet #!
	#!/usr/bin/env node

# logs {{{

snippet log
	console.log(${1:var});

# conditioned logs {{{
snippet clog
	if (typeof console !== "undefined") {
	    console.log(${1:var});
	}

snippet alog
	if (typeof console !== "undefined") {
	    console.log(${1:var});
	} else {
	    alert($1);
	}

snippet jlog
	if (typeof console !== "undefined") {
	    console.log(JSON.stringify(${1:var}));
	} else {
	    alert(JSON.stringify($1));
	}
# }}}

# }}}

# debugs {{{

# if debug {{{
snippet ifdeb
	// if debug mode: ${1:what do you do here?} {{{
	if (typeof debug !== "undefined" && theosp.array.isArray(debug) && (debug.length === 0 || theosp.array.indexOf(${2:debug_category}, debug) !== -1)) {
	    ${3:stuffs for debug mode}
	} else {
	    ${4:stuffs for normal mode}
	}
	// }}}
# }}}

# debug variable {{{
snippet debv
	// Debug variable: ${1:var} {{{
	var debug_message = "$1: " + JSON.stringify($1);
	if (typeof debug !== "undefined" && theosp.array.isArray(debug) && (debug.length === 0 || theosp.array.indexOf(${2:debug_category}, debug) !== -1)) {
		if ($("#theosp_debug").length !== 0) {
	        $("#theosp_debug").append(debug_message + "<br />");
		} else if (typeof console !== 'undefined') {
	        console.log(debug_message);
	    } else {
	        alert(debug_message);
	    }
	}
	// }}}
# }}}

# debug location {{{
snippet debl
	// Debug location: ${1:location} {{{
	var debug_message = "Location: $1";
	if (typeof debug !== "undefined" && theosp.array.isArray(debug) && (debug.length === 0 || theosp.array.indexOf(${2:debug_category}, debug) !== -1)) {
		if ($("#theosp_debug").length !== 0) {
	        $("#theosp_debug").append(debug_message + "<br />");
		} else if (typeof console !== 'undefined') {
	        console.log(debug_message);
	    } else {
	        alert(debug_message);
	    }
	}
	// }}}
# }}}

# self debug variable {{{
snippet sdebv
	self.debugVariable("${1:var}", $1);
# }}}

# self debug location {{{
snippet sdebl
	self.debugLocation("${1:location_name}");
# }}}

# }}}

# Shortcuts {{{
snippet export
	exports.${1:prop} = $1;
snippet global
	global.${1:prop} = $1;
snippet st
	var self = this;
snippet jquery_child_constructor
	/*
	$.${1:ConstructorName}

	AUTHOR: Daniel Chcouri <333222@gmail.com>

	RERUIRES: Node.js's EventEmitter
	          Daniel Chcouri's ModesManager
	          Daniel Chcouri's theosp_common_js (theosp.js)
	*/
	(function ($) {
	    $.$1 = function (parent, options) {
	        var self = this;

			self.elements = {
				parent: $(parent)
			};

	        if (typeof options === 'undefined') {
	            options = {};
	        }
	        self.options = theosp.object.clone(self.options); // clone the prototypical options
	        $.extend(self.options, options);

	        self.modes_manager = new $.ModesManager({modes_prefix: self.options.css_prefix});

	        self.init();
	    };

	    $.$1.prototype = new EventEmitter();
	    $.$1.prototype.constructor = $.$1;

	    $.$1.prototype.$ = function (selector, context) {
	        var self = this;

	        selector = theosp.string.supplant(selector, {
	    	    prefix: self.options.css_prefix,
		        id: self.id
	        });

	        return $(selector, context);
	    };

	    $.$1.prototype.options = {
	        // meta_options
	        css_prefix: '$1-'

			// options
	    };

	    $.$1.prototype.init = function () {
	        var self = this;

	        // Set events that were passed via the options object
	        for (var event in self.options.events) {
	            if (self.options.events.hasOwnProperty(event)) {
	                self.on(event, self.options.events[event]);
	            }
	        }

			self.initDom();
	    };

	    $.$1.prototype.initDom = function () {
	        var self = this;

	        self.elements.parent.append(
	            theosp.string.supplant(
	                (
	                 '<div class="|prefix|${2:underScoresConstructorName}_container">' +
	                     '<div class="|prefix|$2">' +
	                     '</div>' +
					 '</div>'
	                ), {prefix: self.options.css_prefix
	                }
	            )
	        );
	    };

	    $.fn.extend({
	    	${3:lowerCamelCasedConstructorName}: function (options) {
	            var $3Objects = [];

	            this.each(function () {
	                $3Objects.push(new $.$1(this, options));
	    		});

	            return $3Objects;
	        }
	    });
	})(jQuery);
snippet jquery_constructor
	/*
	$.${1:ConstructorName}

	AUTHOR: Daniel Chcouri <333222@gmail.com>

	RERUIRES: Node.js's EventEmitter
	          Daniel Chcouri's ModesManager
	          Daniel Chcouri's theosp_common_js (theosp.js)
	*/
	(function ($) {
	    $.$1 = function (options) {
	        var self = this;

	        if (typeof options === 'undefined') {
	            options = {};
	        }
	        self.options = theosp.object.clone(self.options); // clone the prototypical options
	        $.extend(self.options, options);

	        self.modes_manager = new $.ModesManager({modes_prefix: self.options.css_prefix});

	        self.init();
	    };

	    $.$1.prototype = new EventEmitter();
	    $.$1.prototype.constructor = $.$1;

	    $.$1.prototype.$ = function (selector, context) {
	        var self = this;

	        selector = theosp.string.supplant(selector, {
	    	    prefix: self.options.css_prefix,
		        id: self.id
	        });

	        return $(selector, context);
	    };

	    $.$1.prototype.options = {
	        // meta_options
	        css_prefix: '$1-'

			// options
	    };

	    $.$1.prototype.init = function () {
	        var self = this;
	    };
	})(jQuery);
snippet constructor
	/*
	${1:ConstructorName}

	AUTHOR: Daniel Chcouri <333222@gmail.com>

	RERUIRES: Node.js's EventEmitter
	          Daniel Chcouri's theosp_common_js (theosp.js)
	*/

	(function () {
	    $1 = function (options) {
	    	var self = this;

	    	if (typeof options === 'undefined') {
	    		options = {};
	    	}
	    	self.options = theosp.object.clone(self.options); // clone the prototypical options
	    	theosp.object.extend(self.options, options);

	    	self.init();
	    };

	    $1.prototype = new EventEmitter();
	    $1.prototype.constructor = $1;

	    $1.prototype.options = {
	    };

	    $1.prototype.init = function () {
	    	var self = this;
	    };

	    // If this script has been loaded using CommonJS's
	    if (typeof module === 'object' && typeof module.exports === 'object') {
	        exports.$1 = $1;
	    } else {
	        this.$1 = $1;
	    }
	})();
# }}}

# functions {{{

# closure function {{{
snippet cfun
	(function (${1:var1, var2}) {
		${2}
	})($1);
# }}}

# Anonymous function
snippet afun
	function () {
		${1}
	}
snippet afun;
	function () {
		${1}
	};
snippet pr
	${1:obj}.prototype.${2:name} = function () {
	    var self = this;

	    ${3}
	};
# }}}

# for {{{

# forin: loop over objects {{{
snippet forin
	for (var ${1:item} in ${2:object}) {
		if ($2.hasOwnProperty($1)) {
			${3}
		}
	}
# }}}

# for: loop over arrays {{{
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		var ${5:item} = ${4:$1[$2]};

		${6}
	}
# }}}

# }}}

# Ifs {{{
# if
snippet if
	if (${1}) {
		${2}
	}
# if defined
snippet ifd
	if (typeof ${1:obj} !== 'undefined') {
		${2}
	}
# if undefined
snippet ifud
	if (typeof ${1:obj} === 'undefined') {
		${2}
	}
# if undefined default
snippet ifudd
	if (typeof ${1:obj} === 'undefined') {
		$1 = ${2:""};
	}

	${3}
# if true
snippet ift
	if (${1:obj} === true) {
		${2}
	}
# if false
snippet iff
	if (${1:obj} === false) {
		${2}
	}
# if is object
snippet ifobj
	if (typeof ${1:obj} === 'object') {
		${2}
	}
snippet ifnull
	if (${1:obj} === null) {
		${2}
	}
snippet ifnotnull
	if (${1:obj} !== null) {
		${2}
	}
snippet ifnotempty
	if (${1:var} !== '') {
		${2}
	}
# if property is in an object
snippet ifin
	if (${1:prop} in ${2:obj}) {
		${2}
	}
# if property is not in an object
snippet ifnotin
	if (!(${1:prop} in ${2:obj})) {
		${2}
	}
# else if 
snippet elif
	else if (${1}) {
		${2}
	}
# else
snippet else
	else {
		${1}
	}
# }}}

# Types Tests {{{
snippet isdef
	typeof ${1:var} !== 'undefined'${2}
snippet isobj
	typeof ${1:var} === 'object'${2}
snippet isnum
	typeof ${1:var} === 'number'${2}
snippet isstr
	typeof ${1:var} === 'string'${2}
snippet isbool
	typeof ${1:var} === 'boolean'${2}
snippet isarray
	theosp.array.isArray(${1:var});
snippet isnull
	${1:var} === null
snippet notdef
	typeof ${1:var} === 'undefined'${2}
snippet notobj
	typeof ${1:var} !== 'object'${2}
snippet notnum
	typeof ${1:var} !== 'number'${2}
snippet notstr
	typeof ${1:var} !== 'string'${2}
snippet notbool
	typeof ${1:var} !== 'boolean'${2}
snippet notarray
	!theosp.array.isArray(${1:var});
snippet notnull
	${1:var} !== null
# }}}

# General Tests {{{
snippet isin
	${1:property} in ${2:obj}
snippet notin
	!(${1:property} in ${2:obj})
# }}}

# supplant {{{
snippet sup
	theosp.string.supplant(
	    (
		 "${1}"
	    ), {prefix: self.options.css_prefix,
	    }
	)
# }}}

snippet jv0
	href="javascript:void(0);" ${1}
snippet $
	$("${1:selector}").${2:method}(${3:args});
snippet "
	"${1:content}"
#
# Boolean Operators {{{
snippet and
	&& ${1}
snippet or 
	|| ${1}
# }}}

# vim related snippets {{{

# folds {{{
snippet {{
	// ${1:foldname} {{{
snippet c}
	// }}}
snippet {}
	// ${1:foldname} {{{
	${2}
	// }}}
snippet {}c
	// constructor {{{
	${2}
	// }}}
snippet {}pc
	// prototypical chain {{{
	${2}
	// }}}
# }}}

# modline {{{
snippet vmod
	// vim:fdm=marker:fmr={{{,}}}:
# }}}

# }}}

# Razoss snippets {{{

# admin editors {{{

# Razoss Editor FieldSet {{{
snippet refs
	'<fieldset>' +
	    '<legend>${1:Name}</legend>' +
	    '<table>' +
	        '<tbody>' +
	            ${2}
	        '</tbody>' +
	    '</table>' +
	'</fieldset>' +
# }}}

# inputs {{{

# text inputs {{{

# Razoss Editor Text (Input) {{{
snippet reti
	'<p>' +
	    '<label for="|prefix|${1:lower_cased_name}">${2:Human readable name}</label>' +
	    '<input id="|prefix|$1" class="text-input" type="text" value="|$1|" />' +
	'</p>' +
# }}}

# Razoss Editor TextArea {{{
snippet reta
	'<tr>' +
	    '<td><label for="|prefix|${1:lower_cased_name}">${2:Human readable name}</label></td>' +
	    '<td><textarea id="|prefix|$1" class="${3:textarea_class}">|$1|</textarea></td>' +
	'</tr>' +
# }}}

# Razoss load Int {{{

# }}}

# Razoss load String {{{

# }}}

# }}}

# checkbox {{{

# Razoss Editor Checkbox {{{
snippet rec
	'<tr>' +
	    '<td><label for="|prefix|${1:lower_cased_name}">${2:Human readable name}</label></td>' +
	    '<td><input id="|prefix|$1" class="${3:input_class}" type="checkbox" /></td>' +
	'</tr>' +
# }}}

# Razoss Init Checkbox {{{
snippet reic
	// $1 checkbox initiation {{{
	if (self.element_options.${1:option_name} === true) {
	    self.$("#|prefix|$1").attr("checked", "checked");
	}
	// }}}
# }}}

# Razoss Load Checkbox {{{
snippet relc
	self.element_options.${1:option_name} = self.$('#|prefix|$1').is(':checked');
# }}}

# }}}

# }}}

# Razoss Set Supplant Value {{{
snippet rssv
	${1:option_name}: self.options.$1,
# }}}

# }}}

# }}}
snippet clear
	'<div class="clear"></div>' +

snippet div 
	<div class="${1}"></div>
# vim:foldmethod=marker:

snippet tpl
	<template name="${1}">
	    ${2}
	</template>
