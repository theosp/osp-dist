*my-vimrc* *my* My vim customisations 

1. Commands					|my-commands-shortcuts|
2. Key Mappings					|my-key-mappings|
   2.1 All modes				|my-key-mappings-general|
   2.2 Normal mode				|my-key-mappings-normal|
   2.3 Visual mode				|my-key-mappings-visual|
   	2.3.1 diff				|my-key-mappings-visual-diff|
3. Logging					|my-logging|
   3.1 Commands					|my-logging-commands|

==============================================================================
1. Commands				*mycs*	*my-commands-shortcuts*

			*:W*
:W			Equivalent to :w

			*:Wr*
:Wr			Save file as root (wr - Write Root)

			*:HelptagsLocal*
:HelptagsLocal		Generate the help tags file(s) for $HOME/.vim/doc

==============================================================================
2. Key Mappings				*myk*	*my-key-mappings*

2.1 All modes					*my-key-mappings-general*

2.2 Normal mode					*my-key-mappings-normal*

						*my-rs*
<leader>rs	:call ReloadAllSnippets() - Reload all the SnipMate plugins
		snippets

						*my-rh*
<leader>rh	:call HelptagsLocal()

2.3 Visual mode					*my-key-mappings-visual*

2.3.1 diff					*my-key-mappings-visual-diff*

						*my-du*
<leader>du	diff undos - Reverse the effect of diffput and diffget

						*my-do*
<leader>do	diffget (obtain) - Modify the current buffer to undo the
		selected lines differences with the other buffer.

						*my-dp*
<leader>dp	diffput - Just like |my-do| but the other buffer is
		modified instead of the current one.

==============================================================================
3. Logging					*my-logging*

3.1 Commands					*my-logging-commands*

:LogClear {msg}	Clears /var/log/vim

:LogView {msg}	Opens /var/log/vim in a preview window

:LogDebug {msg}	log {msg} to /var/log/vim as a line in the format:
		DEBUG: {msg}

:LogInfo {msg}	log {msg} to /var/log/vim as a line in the format:
		INFO: {msg}

:LogWarn {msg}	log {msg} to /var/log/vim as a line in the format:
		WARN: {msg}

:LogError {msg}	log {msg} to /var/log/vim as a line in the format:
		ERROR: {msg}

:LogCritical {msg}
		log {msg} to /var/log/vim as a line in the format:
		CRITICAL: {msg}

3.2 The log class				*my-logging-class*

Log.New(log_file="/var/log/vim")
		Initiate new Log object that save and display log messages
		to/from a:log_file

Log.log(type, str)
		log {msg} to self.log_file as a line in the format:
		a:type: a:str

Log.debug(str)	The same as Log.log('debug', str)

Log.info(str)	The same as Log.log('info', str)

Log.warn(str)	The same as Log.log('warn', str)

Log.error(str)	The same as Log.log('error', str)

Log.critical(str)
 		The same as Log.log('critical', str)

Log.clear()	Clear self.log_file

fu Log.view()	Opens self.log_file in a preview window

 vim:tw=78:ts=8:ft=help:norl:noexpandtab:
